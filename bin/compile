#!/usr/bin/env bash

set -e            # fail fast
set -o pipefail   # don't ignore exit codes when piping output
# set -x          # enable debugging

build_dir=$1
cache_dir=$2
env_dir=$3
bp_dir=$(cd $(dirname $0); cd ..; pwd)
global_cache_dir=/global_cache

# Fix leak
unset GIT_DIR

# Load some convenience functions like status(), echo(), and indent()
source $bp_dir/bin/common.sh

export_env_dir $env_dir

mkdir -p $build_dir/vendor

if test -f $build_dir/hooks/before_hook.sh; then
  status "Before hook detected. Running..."
  source $build_dir/hooks/before_hook.sh
fi

# Output npm debug info on error
trap cat_npm_debug_log ERR

nginx_pkg_name=heroku-nginx-1.6.0.tar.gz
nginx_url=https://s3.amazonaws.com/devmynd-github/$nginx_pkg_name
nginx_cache_path="$cache_dir/$nginx_pkg_name"

if [ -d "$global_cache_dir" ]; then
  nginx_cache_path="$global_cache_dir/$nginx_pkg_name"
fi

if [ ! -f "$nginx_cache_path" ]; then
  status "Downloading and installing nginx (first run)"
  curl $nginx_url -s -o - | tee $nginx_cache_path | tar xzf - -C $build_dir/vendor
else
  status "Installing nginx"
  tar xzf $nginx_cache_path -C $build_dir/vendor
fi

status "Adding boot script"
cp $bp_dir/bin/boot.sh $build_dir

status "Creating Procfile"
echo "web: exec sh boot.sh" > $build_dir/Procfile

status "Copying configs"
mkdir -p $build_dir/config
cp $bp_dir/config/htpasswd.rb $build_dir/config
cp $bp_dir/config/mime.types $build_dir/config
if [[ ! -f $build_dir/config/nginx.conf.erb ]]; then
  cp $bp_dir/config/nginx.conf.erb $build_dir/config
else
  status "Custom nginx config found"
fi

cd $build_dir

if [ -d "$env_dir" ]; then
  status "Exporting config vars to environment"
  export_env_dir $env_dir
fi

if test -f $build_dir/hooks/after_hook.sh; then
  status "After hook detected. Running..."
  source $build_dir/hooks/after_hook.sh
fi

status "Compile of nginx application finished"
